---
title: "Thesis Präsentation"
subtitle: "Implementing a Scientific Workflow Management System to Conduct the Transition to a Different Reference Genome of a Genetic Analysis Pipeline"
bibliography: references.bib
csl: "ieee.csl"
---

# Einleitung

## Einleitung - Auslöser

::::: {.columns}

:::: {.column width="60%"}
::: {.center-y style='width:60%'}
Wechsel des Referenzgenom in der genetischen Analyse Pipeline

GRCh37 → GRCh38
:::
::::
:::: {.column width="40%"}
::: {.center-y style='width:40%'}
![](images/dna_puzzle.png)
:::
::::
:::::

## Einleitung - Probleme

:::: {.center-y}
::: incremental
-   Prozessierungskapazitäten

-   Speicherplatz

-   Bandbreite

-   Prozessierungsdauer

-   Architektur
:::
::::

## Einleitung - Ziele

:::: {.center-y}
::: incremental
-   Professionalisierung durch Einführung eines\
    **Scientific Workflow Management Systems**

-   Nutzung von Cloud Infrastruktur
:::
::::

# Literaturrecherche

## Literaturrecherche - Ergebnisse
:::: {.center-y}
::: incremental
-   Referenzgenom

-   Sequenzierung

-   Auswirkungen auf IT

-   Scientific Workflow Management Systeme
:::
::::

# Methode

## Methode - Design Science Research

:::: {.blocker}
::: {.center-y}
![Vereinfachter DSR Prozess[^pfeffers]](images/basic_dsr.svg)
:::
::::

[^pfeffers]: Basierend auf @Peffers2007 (vereinfacht)

# Artefakt

## Artefakt - Entscheidung für Nextflow

Auf Bais der Literaturrecherche

## Artefakt - Analyse vorliegendes Skript

Funktion analysiert um zunächst 1:1 übernehmen zu können

## Artefakt - Konvertierung Pipeline zu Nextflow {.smaller}

::::: {.columns}

:::: {.column width="30%"}
::: {.fragment .center-y style='width:30%;text-align: center'}
![Initialer Nextflow Workflow](images/nextflow_dag_v0.1.svg){height="250"}
:::
::::
:::: {.column width="5%"}
::: {.fragment .center-y style='width:5%;text-align: center'}
→
:::
::::
:::: {.column width="30%"}
::: {.fragment style='text-align: center'}
![Nextflow Workflow mit BAM zu FastQ Konvertierung](images/nextflow_dag_v0.2.svg){height="400"}
:::
::::
:::: {.column width="5%"}
::: {.fragment .center-y style='width:5%;text-align: center'}
→
:::
::::
:::: {.column width="30%"}
::: {.fragment style='text-align: center'}
![Finaler Nextflow Workflow](images/nextflow_dag_v0.3.svg){height="400"}
:::
::::
:::::

## Artefakt - Resilienz und Monitoring

- Schritte werden neu gestartet mit mehrt Arbeitsspeicher
- Email nach Abschluss Pipeline

# Cloudnutzung Kostenberechnung

## Cloudnutzung Kostenberechnung - AWS

# Diskussion

## Diskussion - Optimierung CPU Nutzung
```{python}
import pandas as pd
import plotly.io as pio
import plotly.graph_objects as go

BENE_COLORS = (
    "#47476B",
    "#CDA715",
    "#318986",
)
pio.templates["bene"] = go.layout.Template(
    layout=go.Layout(
        colorway=BENE_COLORS,
    )
)
pio.templates.default = "plotly_white+bene"
figure_aoc_cpu_compared = go.Figure()

df_CPU_v04 = pd.DataFrame(
    {
        "step": ["megSAPma", "megSAPvc", "megSAPcn", "megSAPsv", "megSAPdb"],
        "allocated": [15, 8, 2, 2, 2],
        "used": [15 * 0.211, 8 * 0.588, 2 * 0.468, 2 * 0.91, 2 * 0.114],
        "time": [
            pd.Timedelta("2 hours 41 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min") + pd.Timedelta("6 hours 23 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min") + pd.Timedelta("6 hours 23 min") + pd.Timedelta("1 hours 28 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min") + pd.Timedelta("6 hours 23 min") + pd.Timedelta("1 hours 28 min") + pd.Timedelta("3 min 26 s"),
        ],
    }
)

figure_aoc_cpu_compared.add_trace(
    go.Scatter(
        x=[0,11.5],
        y=[12,12],
        fill="tozeroy",
        line_color=BENE_COLORS[0],
        mode="lines",
        name="initital zugewiesen",
    )
)

figure_aoc_cpu_compared.add_trace(
    go.Scatter(
        x=pd.concat([pd.Series([0]), df_CPU_v04["time"].dt.total_seconds() / 60 / 60]),
        y=pd.concat([pd.Series([df_CPU_v04["allocated"][0]]), df_CPU_v04["allocated"]]),
        fill="tozeroy",
        line_color=BENE_COLORS[2],
        #fillcolor=BENE_COLORS[1],
        line_shape="vh",
        mode="lines",
        name="optimiert zugewiesen",
    )
)

figure_aoc_cpu_compared.update_layout(
    dict(
        paper_bgcolor='rgba(0,0,0,0)',
        margin=dict(l=20, r=20, t=20, b=20),
        showlegend=True,
        legend=dict(orientation="h", yanchor="bottom", y=1, xanchor="center", x=0.5),
        xaxis_title="Zeit in h",
        yaxis_title="CPU Kerne",
    )
)
figure_aoc_cpu_compared.show()
```

## Diskussion - Optimierung Speichernutzung
```{python}
import pandas as pd
import plotly.io as pio
import plotly.graph_objects as go

BENE_COLORS = (
    "#47476B",
    "#CDA715",
    "#318986",
)
pio.templates["bene"] = go.layout.Template(
    layout=go.Layout(
        colorway=BENE_COLORS,
    )
)
pio.templates.default = "plotly_white+bene"

df_memory_v04 = pd.DataFrame(
    {
        "step": ["megSAPma", "megSAPvc", "megSAPcn", "megSAPsv", "megSAPdb"],
        "allocated": [2, 20, 48, 2, 2],
        "used": [2 * 0.494, 20 * 0.556, 48 * 0.379, 2 * 0.555, 2 * 0.335],
        "time": [
            pd.Timedelta("2 hours 41 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min") + pd.Timedelta("6 hours 23 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min") + pd.Timedelta("6 hours 23 min") + pd.Timedelta("1 hours 28 min"),
            pd.Timedelta("2 hours 41 min") + pd.Timedelta("2 hours 59 min") + pd.Timedelta("6 hours 23 min") + pd.Timedelta("1 hours 28 min") + pd.Timedelta("3 min 26 s"),
        ],
    }
)

figure_aoc_memory_compared = go.Figure()

figure_aoc_memory_compared.add_trace(
    go.Scatter(
        x=[0,11.5],
        y=[50,50],
        fill="tozeroy",
        line_color=BENE_COLORS[0],
        #fillcolor=CUD_COLORS[1],
        mode="lines",
        name="initial zugewiesen",
    )
)

figure_aoc_memory_compared.add_trace(
    go.Scatter(
        x=pd.concat([pd.Series([0]), df_memory_v04["time"].dt.total_seconds() / 60 / 60]),
        y=pd.concat([pd.Series([df_memory_v04["allocated"][0]]), df_memory_v04["allocated"]]),
        fill="tozeroy",
        line_color=BENE_COLORS[2],
        #fillcolor=CUD_COLORS[1],
        line_shape="vh",
        mode="lines",
        name="optimiert zugewiesen",
    )
)

figure_aoc_memory_compared.update_layout(
    dict(
        paper_bgcolor='rgba(0,0,0,0)',
        margin=dict(l=20, r=20, t=20, b=20),
        template="plotly_white+bene",
        showlegend=True,
        legend=dict(orientation="h", yanchor="bottom", y=1, xanchor="center", x=0.5),
        xaxis_title="Zeit in h",
        yaxis_title="Arbeitsspeicher in GB",
    )
)

figure_aoc_memory_compared.show()

```

# Fazit und Ausblick

## Fazit und Ausblick - Effizienzsteigerung

Luft nach oben

## Fazit und Ausblick - Usability

::::: {.columns}

:::: {.column width="50%"}
::: {.center-y style='width:50%'}

Nutzung Nextflow Tower

:::
::::
::::  {.column width="50%"}
::: {.center-y style='width:50%'}

![Screenshot Nextflow Tower](images/tower_screenshot.png)

:::
::::
:::::

## Fazit und Ausblick - Neuer Sequencer

::::: {.columns}
:::: {.column width="40%"}
::: {.center-y style='width:40%'}

![NovaSeq X Plus Produktbild[^IlluminaInc2022a]](images/novaseq_x.png){height="300"}

:::
::::
::::  {.column width="60%"}
::: {.center-y style='width:60%'}

Einführung NovaSeq X Plus ab Q3 2023 erfordert neue Pipeline

:::
::::
:::::

[^IlluminaInc2022a]: Quelle: @IlluminaInc2022a

# Quellenverzeichnis {visibility="uncounted" .unnumbered .unlisted}

::: {#refs}
:::